#!/bin/bash
set -e

. lib/log.sh
. lib/dependencies.sh

pid_file=/tmp/stream.pid
device_file=/tmp/stream.device
image_margin_left=50
image_margin_top=210

print_usage () {
    cat >&2 <<- EOF
	usage: stream <source>
	Start a video stream on v4l2loopback virtual camera
	Use either an image (.png/.jpg) or a video (.mp4) source
	- Returns the device \`/dev/videoN\` on which ffmpeg is streaming in \`$device_file\`
	- Returns the stream PID in \`$pid_file\`

	arguments:
	  <source>      image or video file to stream (PNG|JPEG|MP4)
	options:
	  -h, --help    show this message
	EOF
}

# Test that a parameter was provided
[[ -n "$1" ]] || {
    print_usage
    exit 1
}

shopt -s nocasematch
case "$1" in
    *.png | *.jpg | *.jpeg)
        image=true
        ;;
    *.mp4)
        image=false
        ;;
    -h | --help)
        print_usage
        exit 0
        ;;
    *)
        log \`$1\` should be an image or a video >&2
        print_usage
        exit 1
        ;;
esac
shopt -u nocasematch

require v4l2loopback ffmpeg

# Get full source file path and check that it exists
src="$(realpath "$1" 2> /dev/null)" && [[ -f "$src" ]] ||
    error \`$1\` file not found

cd "$(realpath "$(dirname "$BASH_SOURCE")")/.."

# Find virtual camera device from a previously saved one
device="$(cat "$device_file" 2> /dev/null)" ||
    # Otherwise find a device provided by v4l
    device="/dev/$(ls /sys/devices/virtual/video4linux 2> /dev/null | head -1)"
# If the device format is not `/dev/videoN` something was wrong
grep -q '^/dev/video[0-9]*$' <<< "$device" ||
    error Could not find the virtual webcam
# Return the virtual webcam device
echo $device > "$device_file"

# Close the currently running stream, if any
if [[ -f "$pid_file" ]] && ps -p $(< "$pid_file") &> /dev/null; then
    kill $(< "$pid_file")
fi

# Start video stream to virtual webcam
if $image; then
    ffmpeg &> /tmp/ffmpeg.log \
        -loop 1 \
        -re -i "$src" \
        -f v4l2 \
        -vcodec rawvideo \
        -pix_fmt yuv420p \
        -vf scale=300:300,pad=1280:720:$image_margin_left:$image_margin_top:white \
        $device \
        &
else
    ffmpeg &> /tmp/ffmpeg.log \
        -stream_loop -1 \
        -re -i "$src" \
        -f v4l2 \
        $device \
        &
fi

# Save the stream PID
echo $! > "$pid_file"
