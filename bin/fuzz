#!/bin/bash
set -e
cd "$(realpath "$(dirname "$BASH_SOURCE")")/.."

log () {
    echo "[[1;34m$0[0m] $@"
}
warning () {
    log "[[1;33mWARNING[0m] $@" >&2
}

print_help () {
    cat >&2 <<- EOF
	usage: fuzz [-h] APP
	Run fuzzing tests for APP

	arguments:
	  APP           the app to test
	options:
	  -h, --help    show this message
	EOF
}

[[ -n "$1" ]] || {
    print_help
    exit 1
}
case "$1" in
    -h | --help)
        print_help
        exit 0
        ;;
    *)  app="$1" ;;
esac

initial_qr=test/qr-examples/qr1.png
test_dir="$(realpath "QRFuzz/tools/QRCodeFuzzer/data-tests/$app")"

# Check Android SDK status
[[ -n "$ANDROID_HOME" ]] ||
    export ANDROID_HOME="$HOME/Android/Sdk"
which adb &> /dev/null ||
    export PATH="$ANDROID_HOME/platform-tools:$ANDROID_HOME/emulator:$PATH"
which adb &> /dev/null || {
    cat >&2 <<- EOF
	Android SDK not found
    It is expected to be in \$ANDROID_HOME: $(sed "s/$HOME/"'~'/ <<< "$ANDROID_HOME")
	EOF
    read -p 'Do you want to install it? (Y/n) ' answer >&2
    if [[ "$answer" != [Nn] ]]; then
        setup/android-sdk
    else
        exit 1
    fi
}

# Check fuzzer status
[[ -n "$NVM_DIR" ]] || export NVM_DIR="$HOME/.nvm"
[[ -s "$NVM_DIR/nvm.sh" ]] && . "$NVM_DIR/nvm.sh"
! npm list 2> /dev/null | grep -q 'UNMET DEPENDENCY' || {
    warning Fuzzer not found
    read -p 'Do you want to install it? (Y/n) ' answer >&2
    if [[ "$answer" != [Nn] ]]; then
        setup/fuzzer
    else
        exit 1
    fi
}

# Automatically kill the background services on exit
trap 'kill $stream_pid $appium_pid &> /dev/null' EXIT INT TERM


log Starting video stream to virtual camera
util/stream "$initial_qr"
device=$(< /tmp/stream.device)
stream_pid=$(< /tmp/stream.pid)

# Wait for the emulator to recognize the virtual camera
until emulator -webcam-list | grep -q "$device"; do
    sleep 1
done

# Start Appium server
log Starting Appium server
appium &> /tmp/appium.log \
    --base-path /wd/hub \
    -p 4723 \
    &
appium_pid=$!

# Check that an emulator is running
[[ -f /tmp/emulator.pid ]] && ps -p $(< /tmp/emulator.pid) &> /dev/null || {
    log Starting Android emulator

    # Launch with an interactive window
    util/launch-emulator "$device"
    # Launch without a window
    # util/launch-emulator "$device" -no-window
}

# Wait for the emulator to start and check that the app is installed
util/apk-install $app


emulator="$( \
    adb devices |
    grep emulator |
    sed 's/\(emulator-[0-9]*\).*/\1/'
)"

cd src

# Create directories and files
[[ -d "$test_dir/screen" ]] || mkdir -p "$test_dir/screen"
[[ -d "$test_dir/logs" ]] || mkdir -p "$test_dir/logs"

log Starting fuzzing tests
npx tsx index.ts "$app" "$test_dir" 4723 "$emulator" || {
    # If the process was terminated by user with ^C (code 130) it's fine
    [[ $? = 130 ]] || {
        warning Fuzzer returned error code $?
        log Something may have gone wrong, try again
    }
}
