#!/bin/bash
set -e
cd "$(realpath "$(dirname "$BASH_SOURCE")")/.."

. lib/log.sh
. lib/dependencies.sh

initial_qr=test/qr-examples/qr1.png
emulator_gui=true

print_usage () {
    cat >&2 <<- EOF
	usage: qrfuzz [-hn] <app>
	Run fuzzing tests for <app>

	arguments:
	  <app>             the app to test
	options:
	  -n, --no-gui      start the emulator in headless mode (without a GUI)
	  -h, --help        show this message
	EOF
}

[[ -n "$1" ]] || {
    print_usage
    exit 1
}
while (( $# > 0 )); do
    case "$1" in
        -n | --no-gui)
            emulator_gui=false
            shift
            ;;
        -h | --help)
            print_usage
            exit 0
            ;;
        *)  app="$1"
            shift
            ;;
    esac
done
[[ -n "$app" ]] || {
    print_usage
    exit 1
}

require android_sdk fuzzer

test_dir="$PWD/data-tests/$app"

# Automatically kill the background services on exit
trap 'kill $stream_pid $appium_pid &> /dev/null' EXIT INT TERM


log Starting video stream to virtual camera
util/stream "$initial_qr"
device=$(< /tmp/stream.device)
stream_pid=$(< /tmp/stream.pid)

# Wait for the emulator to recognize the virtual camera
until emulator -webcam-list | grep -q "$device"; do
    sleep 1
done

# Start Appium server
log Starting Appium server
appium &> /tmp/appium.log \
    --base-path /wd/hub \
    -p 4723 \
    &
appium_pid=$!

# Check that an emulator is running
if [[ -f /tmp/emulator.pid ]] &&
    ps -p $(< /tmp/emulator.pid) &> /dev/null
then
    log Emulator is running with PID $(< /tmp/emulator.pid)
else
    log Starting Android emulator

    if $emulator_gui; then
        # Launch with an interactive window
        util/launch-emulator "$device"
    else
        # Launch without a window
        util/launch-emulator "$device" -no-window
    fi
fi

# Wait for the emulator to start and check that the app is installed
util/apk-install $app


emulator="$( \
    adb devices |
    grep emulator |
    sed 's/\(emulator-[0-9]*\).*/\1/'
)"

# Create directories and files
[[ -d "$test_dir/screen" ]] || mkdir -p "$test_dir/screen"
[[ -d "$test_dir/logs" ]] || mkdir -p "$test_dir/logs"

cd src

log Starting fuzzing tests
npx tsx index.ts "$app" "$test_dir" 4723 "$emulator" || {
    # If the process was terminated by user with ^C (code 130) it's fine
    error_code=$?
    [[ $error_code = 130 ]] || {
        warning Something may have gone wrong, try again
        error Fuzzer returned error code $error_code
    }
}
