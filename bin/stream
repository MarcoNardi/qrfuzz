#!/bin/bash
set -e
cd "$(realpath "$(dirname "$BASH_SOURCE")")/.."

pid_file=/tmp/stream.pid
image_margin_left=50
image_margin_top=210

print_usage () {
    cat >&2 <<- EOF
	usage: stream SOURCE
	Start a video stream on v4l2loopback virtual camera
	Use either an image (.png/.jpg) or a video (.mp4) source
	- Returns the device \`/dev/videoN\` on which ffmpeg is streaming
	- Returns the stream PID in \`/tmp/stream.pid\`

	arguments:
	  SOURCE        image or video file to stream (PNG|JPEG|MP4)
	options:
	  -h, --help    show this message
	EOF
}

# Test that a parameter was provided
if [[ -n "$1" ]]; then
    src="$1"
else
    print_usage
    exit 1
fi

shopt -s nocasematch
case "$1" in
    *.png | *.jpg | *.jpeg)
        image=true
        ;;
    *.mp4)
        image=false
        ;;
    -h | --help)
        print_usage
        exit
        ;;
    *)
        echo $0: \`$1\` should be an image or a video >&2
        print_usage
        exit 1
        ;;
esac
shopt -u nocasematch

# Enable dummy camera
lsmod | grep -q v4l2loopback || {
    setup/v4l2loopback
}

which ffmpeg &> /dev/null || {
    echo $0: ffmpeg is needed for the stream, but it was not found >&2
    read -p 'Do you want to install it? (Y/n) ' answer >&2
    if [[ "$answer" != [Nn] ]]; then
        setup/ffmpeg
    else
        exit 1
    fi
}

# Find virtual camera device
device="/dev/$(ls /sys/devices/virtual/video4linux 2> /dev/null | head -1)"
grep -q '^/dev/video[0-9]*$' <<< "$device" || {
    echo $0: virtual webcam not found >&2
    exit 1
}

# Close the currently running stream, if any
if [[ -f "$pid_file" ]] && ps -p $(cat "$pid_file") &> /dev/null; then
    kill $(cat "$pid_file")
fi

# Start video stream to virtual webcam
if $image; then
    ffmpeg &> /tmp/ffmpeg.log \
        -loop 1 \
        -re -i "$src" \
        -f v4l2 \
        -vcodec rawvideo \
        -pix_fmt yuv420p \
        -vf scale=300:300,pad=1280:720:$image_margin_left:$image_margin_top:white \
        $device \
        &
else
    ffmpeg &> /tmp/ffmpeg.log \
        -stream_loop -1 \
        -re -i "$src" \
        -f v4l2 \
        $device \
        &
fi

# Save the stream PID
echo $! > "$pid_file"

# Return the device
echo $device
